name: Build and Deploy Docker Images

on:
  push:
    branches:
      - CNV-614  # Trigger on push to main branch
    paths:
      - 'app.json'  # Trigger only when app.json is changed
env:
  NODE_VERSION: '20'
jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read current app.json version
        id: read-current-app-json
        run: |
          current_version=$(jq -r '.version' ./app.json)
          echo "current_version=${current_version}" >> $GITHUB_ENV
          echo "::set-output name=current_version::${current_version}"

      - name: Fetch tags from remote
        run: git fetch --tags

      - name: Check if tag already exists
        id: tag-check
        run: |
          if git rev-parse "v${{ steps.read-current-app-json.outputs.current_version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.read-current-app-json.outputs.current_version }} already exists."
            echo "::set-output name=tag_exists::true"
          else
            echo "Tag v${{ steps.read-current-app-json.outputs.current_version }} does not exist."
            echo "::set-output name=tag_exists::false"
          fi

  install-and-build-frontend:
    runs-on: ubuntu-latest
    needs: check-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build frontend project
        run: npm run build
        working-directory: ./frontend

  install-and-build-backend:
    runs-on: ubuntu-latest
    needs: check-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install backend dependencies
        run: npm install
        working-directory: ./backend

      - name: Build backend project
        run: npm run build
        working-directory: ./backend
      
  create-frontend-image:
    runs-on: ubuntu-latest
    needs: install-and-build-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push frontend Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t saowwapark/incnv-frontend:v${{ needs.check-version.outputs.current_version }} -t saowwapark/incnv-frontend:latest ./frontend --push

      - name: Push Docker images to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push saowwapark/incnv-frontend:v${{ needs.check-version.outputs.current_version }}
          docker push saowwapark/incnv-frontend:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  create-backend-image:
    runs-on: ubuntu-latest
    needs: install-and-build-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push backend Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t saowwapark/incnv-backend:v${{ needs.check-version.outputs.current_version }} -t saowwapark/incnv-backend:latest ./backend --push

      - name: Push Docker images to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push saowwapark/incnv-backend:v${{ needs.check-version.outputs.current_version }}
          docker push saowwapark/incnv-backend:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          
  add-tag-version:
    runs-on: ubuntu-latest
    needs: [create-frontend-image, create-backend-image]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create tag if not exists
        if: needs.check-version.outputs.tag_exists == 'false'
        run: |
          git tag "v${{ needs.check-version.outputs.current_version }}"
          git push origin "v${{ needs.check-version.outputs.current_version }}"

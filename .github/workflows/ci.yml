name: Build and Deploy Docker Images
on:
  push:
    branches:
      - build-image/*
    paths:
      - 'app.json'
env:
  NODE_VERSION: '20'
jobs:
  get-image-version:
    runs-on: ubuntu-latest
    outputs:
      CURRENT_FRONTEND_IMAGE_VERSION: ${{ steps.get-current-image-version.outputs.CURRENT_FRONTEND_IMAGE_VERSION }}
      CURRENT_BACKEND_IMAGE_VERSION: ${{ steps.get-current-image-version.outputs.CURRENT_BACKEND_IMAGE_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get current image version
        id: get-current-image-version
        run: |
          CURRENT_FRONTEND_IMAGE_VERSION=$(grep "image: ${{ secrets.DOCKER_USERNAME }}/incnv-frontend:" docker-compose/docker-compose.yml | awk -F: '{print $3}')
          CURRENT_BACKEND_IMAGE_VERSION=$(grep "image: ${{ secrets.DOCKER_USERNAME }}/incnv-backend:" docker-compose/docker-compose.yml | awk -F: '{print $3}')

          echo "CURRENT_FRONTEND_IMAGE_VERSION=$CURRENT_FRONTEND_IMAGE_VERSION"
          echo "CURRENT_BACKEND_IMAGE_VERSION=$CURRENT_BACKEND_IMAGE_VERSION"

          echo "CURRENT_FRONTEND_IMAGE_VERSION=$CURRENT_FRONTEND_IMAGE_VERSION" >> $GITHUB_OUTPUT
          echo "CURRENT_BACKEND_IMAGE_VERSION=$CURRENT_BACKEND_IMAGE_VERSION" >> $GITHUB_OUTPUT


  create-frontend-image:
    runs-on: ubuntu-latest
    needs: [get-image-version]
    env:
      CURRENT_FRONTEND_IMAGE_VERSION: ${{needs.get-image-version.outputs.CURRENT_FRONTEND_IMAGE_VERSION}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Init frontend submodule
        run: |
           git submodule update --init frontend
           cd frontend
           git submodule update --init --recursive
           git fetch --tags
           git checkout v${CURRENT_FRONTEND_IMAGE_VERSION}

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
    
      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Build frontend project
        run: npm run build
        working-directory: ./frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push incnv-frontend Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/incnv-frontend:${CURRENT_FRONTEND_IMAGE_VERSION} -t ${{ secrets.DOCKER_USERNAME }}/incnv-frontend:latest ./frontend --push

  create-backend-image:
    runs-on: ubuntu-latest
    needs: [get-image-version]
    env:
      CURRENT_BACKEND_IMAGE_VERSION: ${{needs.get-image-version.outputs.CURRENT_BACKEND_IMAGE_VERSION}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Init backend submodule
        run: |
            git submodule update --init backend
            cd backend
            git submodule update --init --recursive
            git fetch --tags
            git checkout v${CURRENT_BACKEND_IMAGE_VERSION}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push incnv-backend Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/incnv-backend:${CURRENT_BACKEND_IMAGE_VERSION} -t ${{ secrets.DOCKER_USERNAME }}/incnv-backend:latest ./backend --push
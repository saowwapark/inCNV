name: Build and Deploy Docker Images

on:
  push:
    branches:
      - CNV-614  # Trigger on push to main branch
    paths:
      - '**'  # Trigger only when app.json is changed
env:
  NODE_VERSION: '20'
jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.read-current-app-json.outputs.current_version }}
      version_changed: ${{ steps.version_check.outputs.version_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read current app.json version
        id: read-current-app-json
        run: |
          current_version=$(jq -r '.version' ./app.json)
          echo "current_version=${current_version}" >> $GITHUB_ENV
          echo "::set-output name=current_version::${current_version}"
          echo "Current version: ${current_version}"

      - name: Fetch previous version of app.json
        run: git fetch origin main:refs/remotes/origin/main

      - name: Read previous app.json version
        id: read-previous-app-json
        run: |
          git show origin/main~1:app.json > previous_app.json
          previous_version=$(jq -r '.version' previous_app.json)
          echo "previous_version=${previous_version}" >> $GITHUB_ENV
    
      - name: Check if version has changed
        id: version_check
        run: |
          if [ "$current_version" != "$previous_version" ]; then
            echo "Version has changed."
            echo "::set-output name=version_changed::true"
          else
            echo "Version has not changed."
            echo "::set-output name=version_changed::false"
          fi

  install-and-build-frontend:
    runs-on: ubuntu-latest
    needs: check-version
    steps:
      - name: Print
        run: echo "needs.check-version.outputs.version_changed=${{needs.check-version.outputs.version_changed}}"
              echo "needs.check-version.outputs.current_version=${{needs.check-version.outputs.current_version}}"
        
      
  create-frontend-image:
    runs-on: ubuntu-latest
    needs: install-and-build-frontend

    steps:
      - name: Print
        run: |
          echo "image tag version = v${{ needs.check-version.outputs.current_version }}"
          echo "current_version = v${{ needs.check-version.outputs.current_version }}"


  add-tag-version:
    runs-on: ubuntu-latest
    needs: [create-frontend-image]

    steps:
      - name: Print
        run: |
          echo "image tag version = v${{ needs.check-version.outputs.current_version }}"
          echo "current_version = v${{ needs.check-version.outputs.current_version }}"

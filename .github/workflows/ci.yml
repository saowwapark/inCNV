name: Build and Deploy Docker Images

on:
  push:
    branches:
      - CNV-614  # Trigger on push to main branch
    paths:
      - '**'  # Trigger only when app.json is changed
env:
  NODE_VERSION: '20'
jobs:
  check-updated-version:
    runs-on: ubuntu-latest
    outputs:
      CURRENT_APP_VERSION: ${{ steps.read-current-app-json.outputs.CURRENT_APP_VERSION }}
      IS_VERSION_CHANGED: ${{ steps.version_check.outputs.IS_VERSION_CHANGED }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read current app.json version
        id: read-current-app-json
        run: |
          CURRENT_APP_VERSION=$(jq -r '.version' ./app.json)
          echo "CURRENT_APP_VERSION=${CURRENT_APP_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_APP_VERSION::${CURRENT_APP_VERSION}"
          echo "CURRENT_APP_VERSION: ${CURRENT_APP_VERSION}"

      - name: Fetch previous version of app.json
        run: git fetch origin main:refs/remotes/origin/main

      - name: Read previous app.json version
        id: read-previous-app-json
        run: |
          git show origin/main:app.json > previous_app.json
          PREVIOUS_APP_VERSION=$(jq -r '.version' previous_app.json)
          echo "PREVIOUS_APP_VERSION=${PREVIOUS_APP_VERSION}" >> $GITHUB_ENV
          echo "PREVIOUS_APP_VERSION=${PREVIOUS_APP_VERSION}"
          
      - name: Check if version has changed
        id: version_check
        run: |
          if [ "$CURRENT_APP_VERSION" != "$PREVIOUS_APP_VERSION" ]; then
            echo "Version has changed."
            echo "::set-output name=IS_VERSION_CHANGED::true"
          else
            echo "Version has not changed."
            echo "::set-output name=IS_VERSION_CHANGED::false"
          fi
  check-matched-version:
    runs-on: ubuntu-latest
    needs: check-updated-version
    if: needs.check-updated-version.outputs.IS_VERSION_CHANGED == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract versions from docker-compose.yml
        run: |
          DOCKER_VERSION=$(grep "version:" docker-compose/docker-compose.yml | awk '{print $2}' | tr -d "'")
          FRONTEND_IMAGE_VERSION=$(grep "image: incnv-frontend:" docker-compose.yml | awk -F: '{print $2}')
          BACKEND_IMAGE_VERSION=$(grep "image: incnv-backend:" docker-compose.yml | awk -F: '{print $2}')

          echo "DOCKER_VERSION: $DOCKER_VERSION"
          echo "FRONTEND_IMAGE_VERSION: $FRONTEND_IMAGE_VERSION"
          echo "BACKEND_IMAGE_VERSION: $BACKEND_IMAGE_VERSION"
          echo "CURRENT_APP_VERSION=${{needs.check-updated-version.outputs.CURRENT_APP_VERSION}}" >> $GITHUB_ENV
          echo "CURRENT_APP_VERSION: $CURRENT_APP_VERSION"
      - name: Check matched version
        run: |
          if [[ "$CURRENT_APP_VERSION" == "$DOCKER_VERSION" && "$CURRENT_APP_VERSION" == "$FRONTEND_IMAGE_VERSION" && "$CURRENT_APP_VERSION" == "$BACKEND_IMAGE_VERSION" ]]; then
            echo "All versions in app.json and doker-compose.yml match."
          else
            echo "Versions do not match."
            exit 1
          fi

  install-and-build-frontend:
    runs-on: ubuntu-latest
    needs: [check-updated-version, check-matched-version]
    if: needs.check-updated-version.outputs.IS_VERSION_CHANGED == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build frontend project
        run: npm run build
        working-directory: ./frontend

  install-and-build-backend:
    runs-on: ubuntu-latest
    needs: [check-updated-version, check-matched-version]
    if: needs.check-updated-version.outputs.IS_VERSION_CHANGED == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install backend dependencies
        run: npm install
        working-directory: ./backend

      - name: Build backend project
        run: npm run build
        working-directory: ./backend
      
  create-frontend-image:
    runs-on: ubuntu-latest
    needs: [check-updated-version, install-and-build-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push incnv-frontend Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t saowwapark/incnv-frontend:v${{ needs.check-version.outputs.CURRENT_APP_VERSION }} -t saowwapark/incnv-frontend:latest ./frontend --push

  create-backend-image:
    runs-on: ubuntu-latest
    needs: [check-updated-version, install-and-build-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push incnv-backend Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t saowwapark/incnv-backend:v${{ needs.check-updated-version.outputs.CURRENT_APP_VERSION }} -t saowwapark/incnv-backend:latest ./backend --push

          
  add-tag-version:
    runs-on: ubuntu-latest
    needs: [check-updated-version, create-frontend-image, create-backend-image]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch tags from remote
        run: git fetch --tags

      - name: Check if tag already exists
        id: tag-check
        run: |
          if git rev-parse "v${{ needs.check-updated-version.outputs.CURRENT_APP_VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ needs.check-updated-version.outputs.CURRENT_APP_VERSION }} already exists."
            echo "::set-output name=tag_exists::true"
          else
            echo "Tag v${{ needs.check-updated-version.outputs.CURRENT_APP_VERSION }} does not exist."
            echo "::set-output name=tag_exists::false"
          fi

      - name: Create tag if not exists
        if: steps.tag-check.outputs.tag_exists == 'false'
        run: |
          git tag "v${{ needs.check-updated-version.outputs.CURRENT_APP_VERSION }}"
          git push origin "v${{ needs.check-updated-version.outputs.CURRENT_APP_VERSION }}"
          echo "Add tag v${{ needs.check-updated-version.outputs.CURRENT_APP_VERSION }} finished."
